/**
 * Utility functions for saving files generated by the Visual Low-Code App Builder
 */

/**
 * Saves a Blob as a file with the specified name
 * @param {Blob} blob - The blob to save
 * @param {string} fileName - Name for the saved file
 */
export function saveAs(blob, fileName) {
  // Create a URL for the blob
  const url = window.URL.createObjectURL(blob);
  
  // Create a temporary link element
  const link = document.createElement('a');
  link.href = url;
  link.download = fileName;
  
  // Append link to body, click it, and remove it
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // Clean up the URL object
  window.URL.revokeObjectURL(url);
}

/**
 * Saves the exported Next.js project as a zip file
 * @param {Object} projectData - JSON representation of the canvas state
 */
export async function saveProject(projectData) {
  try {
    // Import JSZip dynamically to reduce initial bundle size
    const JSZip = (await import('jszip')).default;
    const zip = new JSZip();

    // Add project files to zip
    zip.file('pages/index.js', generateIndexFile(projectData));
    zip.file('package.json', generatePackageFile());

    // Generate and save the zip file
    const blob = await zip.generateAsync({ type: 'blob' });
    saveAs(blob, 'nextjs-project.zip');
  } catch (error) {
    console.error('Error saving project:', error);
    throw error;
  }
}

/**
 * Generates the index.js file content from project data
 * @param {Object} projectData - JSON representation of the canvas state
 * @returns {string} The contents of index.js
 */
function generateIndexFile(projectData) {
  // Basic template for index.js
  return `
export default function App() {
  return (
    ${generateJSXFromNodes(projectData.nodes)}
  );
}`;
}

/**
 * Generates package.json content with required dependencies
 * @returns {string} The contents of package.json
 */
function generatePackageFile() {
  return JSON.stringify({
    name: "generated-app",
    version: "1.0.0",
    private: true,
    scripts: {
      "dev": "next dev",
      "build": "next build",
      "start": "next start"
    },
    dependencies: {
      "next": "latest",
      "react": "latest",
      "react-dom": "latest"
    }
  }, null, 2);
}

/**
 * Converts node data into JSX string
 * @param {Array} nodes - Array of node objects from the canvas
 * @returns {string} JSX representation of the nodes
 */
function generateJSXFromNodes(nodes) {
  if (!nodes || nodes.length === 0) return '<div />';
  
  // Start with the page component
  const pageNode = nodes.find(node => node.type === 'page');
  if (!pageNode) return '<div />';
  
  return generateNodeJSX(pageNode, nodes);
}

/**
 * Recursively generates JSX for a node and its children
 * @param {Object} node - Current node to process
 * @param {Array} allNodes - All nodes from the canvas
 * @returns {string} JSX string for this node and its children
 */
function generateNodeJSX(node, allNodes) {
  switch (node.type) {
    case 'page':
    case 'div':
      const children = allNodes.filter(n => n.parentId === node.id);
      const childrenJSX = children.map(child => generateNodeJSX(child, allNodes)).join('\n');
      return `<div${generateProps(node.props)}>${childrenJSX}</div>`;
      
    case 'text':
      return `<p${generateProps(node.props)}>${node.props?.content || ''}</p>`;
      
    case 'button':
      return `<button${generateProps(node.props)}>${node.props?.label || 'Click Me'}</button>`;
      
    default:
      return '';
  }
}

/**
 * Generates prop string for JSX elements
 * @param {Object} props - Component props
 * @returns {string} Formatted props string
 */
function generateProps(props) {
  if (!props) return '';
  
  const propsArray = Object.entries(props)
    .filter(([key]) => !['content', 'label'].includes(key))
    .map(([key, value]) => `${key}="${value}"`);
    
  return propsArray.length ? ` ${propsArray.join(' ')}` : '';
}
